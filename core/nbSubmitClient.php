<?php
require_once 'DataTransfer.php';

/**
 * Submission client to transfer data to netblog server; expects response formatted by nbSubmitServer
 *
 */
class nbSubmitClient {
	
	/**
	 * Send data to given url
	 *
	 * @param string $url
	 * @param mixed $data
	 */
	public function __construct($url,$data) {
		if(Netblog::options()->getPrivacyLevel()=='ultra') {
			$this->errno = 501;
			$this->error = 'Strict Privacy Level';
			return;
		}	
		$fields = array('data' => $str=base64_encode(is_array($data) || is_object($data) ? http_build_query($data) : $data));
					 
		// CONTACT SERVER AND RETRIEVE RESPONSE
		Netblog::log("Transfering ".round(strlen($str)/1024,3)."KB encrypted data to $url");
		$result = DataTransfer::SubmitPost($url, $fields);
		if($result['content']) {
			$this->response = $result['content'];
			$this->parse();
		} else if($result['error']) {
			$this->errno = $result['errno'];
			$this->error = $result['error'];
		} else {
			$this->errno = 503;
			$this->error = 'Service Unavailable';
		}
	}
	
	/**
	 * Parse server response, generated by nbSubmitServer
	 *
	 */
	private function parse() {
		try {
			$xml = @(new SimpleXMLElement($this->response));
			if(isset($xml->STATUS) && isset($xml->STATUS['type']) && isset($xml->STATUS['message']) && isset($xml->STATUS['code'])) {
				if($xml->STATUS['type'] == 'error') {
					$this->error = $xml->STATUS['message'];
					$this->errno = $xml->STATUS['code'];
				}
			} else {
				$this->errno = 501;
				$this->error = 'Not Implemented';
			}
		} catch (Exception $e) {
			//var_dump($this->response);
			$this->errno = $e->getCode() > 0 ? $e->getCode() : 500;
			$this->error = $e->getMessage();
		}
	}
	
	/**
	 * Check if transaction has error
	 *
	 * @return bool
	 */
	public function hasError() {
		return $this->errno > 0;
	}
	
	public $response = '';
	public $errno = 0;
	public $error = '';
}
?>